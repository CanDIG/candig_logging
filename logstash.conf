# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
  beats {
    port => 5044
  }
  file {
    path => "/home/dnaidoo/Documents/federation_service/log/federation.log"
    codec => "json"
    type => "federation_service"
  }

  file {
    path => "/home/dnaidoo/Documents/datasets_service/log/datasets.log"
    codec => "json"
    type => "datasets_service"
  }


  file {
    path => "/tmp/tyk/*.csv"
    type => "tyk_analytics_csv"    
  }
}

filter {
  if [type] == "tyk_analytics_csv" {
    csv {
      
      columns => [
	"Method", "Host", "Path", "RawPath", "ContentLength", "UserAgent", "Day",
	"Month", "Year", "Hour", "ResponseCode", "APIKey", "TimeStamp", "APIVersion",
	"APIName", "APIID", "OrgID", "OauthID", "RequestTime", "RawRequest", "RawResponse",
	"IPAddress", "Geo","Network", "Latency", "Tags", "Alias", "TrackPath", "ExpireAt"    

      ]

      
    }
    ruby {
      code => 'event.set("decodedRequest", Base64.decode64(event.get("RawRequest")))'
          
    }

    ruby {
      code => 'event.set("decodedResponse", Base64.decode64(event.get("RawResponse")))'

    }
     
    if [APIName] == "Authentication" {
      grok {

        match => { "decodedResponse" => "(?<ID_TOKEN>{(.*)})" }

      }

      grok {

        match => { "decodedRequest" => "(?<CREDS>{(.*)})" }

      }

      json {
        source => "CREDS"
        remove_field => "password"
        remove_field => "decodedRequest"
        
      }

      json {
        source => "ID_TOKEN"
        remove_field => "ID_TOKEN"
      }
        
      mutate {
        update => { "Alias" => "%{username}" }
        remove_field => [ "username", "RawResponse", "RawRequest", "message", "CREDS", "decodedResponse" ]
      }
    }

    if [APIName] =~ "Tyk_Federation_\d" {
      grok {

        match => { "decodedResponse" => "(?<RESULTS>{(.*)})" }

      }

      
      grok {

        match => { "decodedRequest" => "%{WORD:Path}\s/%{URIPARAM:Service}.*Bearer\s(?<token>[A-Za-z0-9\-_=]+\.[A-Za-z0-9\-_=]+\.?[A-Za-z0-9\-_.+=]*)" }

      }


      json {
        source => "RESULTS"
        remove_field => "RESULTS"
      }

      mutate {
        rename => { "results" => "Results" }
        rename => { "status" => "Status" }

      }
      
   }
  }

  if ![APIName] {
     mutate {
       add_field => { "APIName" => "%{type}" }
     }
  }

  if [APIName] == "federation_service" {
    mutate {
      gsub => [

        "data", "^b|'", ""

      ]
    }
    
    json {
      source => "data"
      
    }

  }


}

output {
  elasticsearch {
    hosts => ["http://10.9.208.132:9200"]
    #index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    #user => "elastic"
    #password => "changeme"
  }
  stdout { codec => rubydebug }
}
